// <auto-generated />
using System;
using DataAccessLay;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLay.Migrations
{
    [DbContext(typeof(Dcontext))]
    partial class DcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("BuisinessLay.Author", b =>
                {
                    b.Property<int>("authorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("author_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("authorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BuisinessLay.Course", b =>
                {
                    b.Property<int>("courseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("authorId")
                        .HasColumnType("int");

                    b.Property<int>("courseLevel")
                        .HasColumnType("int");

                    b.Property<float>("fullPrice")
                        .HasColumnType("real");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("courseId");

                    b.HasIndex("authorId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            courseId = 1,
                            DatePublished = new DateTime(2020, 12, 15, 13, 12, 29, 70, DateTimeKind.Utc).AddTicks(3988),
                            Description = "description",
                            authorId = 1,
                            courseLevel = 0,
                            fullPrice = 0f,
                            title = "courseforauth1"
                        });
                });

            modelBuilder.Entity("BuisinessLay.Tag", b =>
                {
                    b.Property<int>("tagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("tag_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("tagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CourseTag", b =>
                {
                    b.Property<int>("CoursescourseId")
                        .HasColumnType("int");

                    b.Property<int>("TagstagId")
                        .HasColumnType("int");

                    b.HasKey("CoursescourseId", "TagstagId");

                    b.HasIndex("TagstagId");

                    b.ToTable("CourseTags");
                });

            modelBuilder.Entity("BuisinessLay.Course", b =>
                {
                    b.HasOne("BuisinessLay.Author", "author")
                        .WithMany("Courses")
                        .HasForeignKey("authorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("author");
                });

            modelBuilder.Entity("CourseTag", b =>
                {
                    b.HasOne("BuisinessLay.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursescourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuisinessLay.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagstagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuisinessLay.Author", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
